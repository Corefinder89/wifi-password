#!/usr/bin/env sh

version="0.0.1"

# Shows the usage
function usage() {
  cat << EOS
Usage:
  wifi-password [options]
Options:
  -i      - SSID of the network you want to get the password
  -a      - Get the list of all network with their passwords
  -v      - Output version
  -h      - Show the usage
Examples:
  wifi-password -i foo-network
EOS
}

# Main script
if [[ $# -eq 0 ]]; then
  usage
  exit 0
fi

while getopts "hvi:" opt; do
  case ${opt} in
    h | i | v)
      declare "option_${opt}=${OPTARG:-0}"
    ;;
    \?)
      echo >&2 "Use 'wifi-password -h' to see usage info"
      exit 1
    ;;
  esac
done

shift $((OPTIND - 1))

# If number of arguments is 0 then exit
if [[ $# -gt 0 ]]; then
  echo >&2 "Invalid arguments: $@"
  echo >&2 "Use 'wifi-password -h' to see usage info"
  exit 1
fi

# Main script
if [[ ${option_h} ]]; then
  usage
  exit 0
fi

# Show version of the script
if [[ ${option_v} ]]; then
  echo "wifi-password version ${version}"
  exit 0
fi

# Get wifi password
if [[ -n ${option_i} ]]; then
  case "`uname -s`" in
    Darwin)
      cmdOutput="`security find-generic-password -D 'AirPort network password' -a "${option_i}" -g 2>&1 > /dev/null`"
      # exit if ssid not found
      if [[ ${cmdOutput} =~ "could" ]]; then
        echo >&2 "ERROR: Could not find SSID \"${option_i}\""
        exit 1
      fi
      # Extract password from string
      wifiPassword=$(echo ${cmdOutput} | cut -d'"' -f 2)
      echo ${wifiPassword}
    ;;
    Linux)
      cmdOutput="`cat /etc/NetworkManager/system-connections/"${option_i}" 2>&1 > /dev/null`"
      wifiPassword=$(echo ${cmdOutput} | sed -n 's/psk=\(.*\)/\1/p')
      echo ${wifiPassword}
    ;;
    CYGWIN* | MINGW* | MSYS*)
      cmdOutput="`netsh wlan show profiles name="${option_i}" key=clear`"
      wifiPassword=$(echo ${cmdOutput} | sed -n 's/\(.*Key Content.*\) : \(.*\)/\2/p')
      echo ${wifiPassword}
    ;;
    *)
      echo >&2 "Operating system is unknown"
      exit 1
    ;;
  esac
fi
